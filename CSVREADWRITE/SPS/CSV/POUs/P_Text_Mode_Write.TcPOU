<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="P_Text_Mode_Write" Id="{26b7bffa-80dd-4f69-bc47-dc3d48ab3b02}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Text_Mode_Write

(* Writing of CSV file in text mode. None of the field value is containing any non-printing control characters like line feed, carriage return, quotation marks, semicolon... *)
VAR
	bWrite			: BOOL := FALSE;(* Rising edge starts program execution *)
	sNetId			: T_AmsNetId := '';	(* TwinCAT system network address *)
	sFileName		: T_MaxString := 'C:\Temp\CSVDateien.csv';(* CSV destination file path and name *)
	sCSVLine		: T_MaxString := '';(* Single CSV text line (row, record), we are using string as record buffer (your are able to see created fields) *)
	sCSVField		: T_MaxString := '';(* Single CSV field value (column, record field) *)
	bBusy			: BOOL;
	bError			: BOOL;
	nErrId			: UDINT;
	nRow	 		: UDINT 	:= 0;(* Row number (record) *)
	nColumn			: UDINT 	:= 0;(* Column number (record field) *)
	hFile			: UINT		:= 0;(* File handle of the source file *)
	step			: DWORD 	:= 0;
	fbFileOpen		: FB_FileOpen;(* Opens file *)
	fbFileClose		: FB_FileClose;(* Closes file *)
	fbFilePuts		: FB_FilePuts;(* Writes one record (line) *)
	fbWriter		: FB_CSVMemBufferWriter;(* Helper function block used to create CSV data bytes (single record line) *)

(*	database		: ARRAY[0..MAX_CSV_ROWS, 0..MAX_CSV_COLUMNS ] OF STRING(MAX_CSV_FIELD_LENGTH) := (* Source PLC database *)
	['11', '22', '33', '44',' 55', '66',
	'77', '88', '99', '1010', '1111', '1212',
	'1313', '1414', '1515', '1616', '1717', '1818',
	'1919', '2020', '2121', '2222', '2323', '2424',
	'2525', '2626', '2727', '2828', '2929', '3030',
	'3131', '3232', '3333', '3434', '3535', '3636'];
*)
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*

Database_String[0,0]:=DINT_TO_STRING(Database_DINT[0,0]);
Database_String[0,1]:=DINT_TO_STRING(Database_DINT[0,1]);
Database_String[0,2]:=DINT_TO_STRING(Database_DINT[0,2]);
Database_String[0,3]:=DINT_TO_STRING(Database_DINT[0,3]);
Database_String[0,4]:=DINT_TO_STRING(Database_DINT[0,4]);
Database_String[0,5]:=DINT_TO_STRING(Database_DINT[0,5]);
Database_String[1,0]:=DINT_TO_STRING(Database_DINT[1,0]);
Database_String[1,1]:=DINT_TO_STRING(Database_DINT[1,1]);
Database_String[1,2]:=DINT_TO_STRING(Database_DINT[1,2]);
Database_String[1,3]:=DINT_TO_STRING(Database_DINT[1,3]);
Database_String[1,4]:=DINT_TO_STRING(Database_DINT[1,4]);
Database_String[1,5]:=DINT_TO_STRING(Database_DINT[1,5]);
Database_String[2,0]:=DINT_TO_STRING(Database_DINT[2,0]);
Database_String[2,1]:=DINT_TO_STRING(Database_DINT[2,1]);
Database_String[2,2]:=DINT_TO_STRING(Database_DINT[2,2]);
Database_String[2,3]:=DINT_TO_STRING(Database_DINT[2,3]);
Database_String[2,4]:=DINT_TO_STRING(Database_DINT[2,4]);
Database_String[2,5]:=DINT_TO_STRING(Database_DINT[2,5]);
Database_String[3,0]:=DINT_TO_STRING(Database_DINT[3,0]);
Database_String[3,1]:=DINT_TO_STRING(Database_DINT[3,1]);
Database_String[3,2]:=DINT_TO_STRING(Database_DINT[3,2]);
Database_String[3,3]:=DINT_TO_STRING(Database_DINT[3,3]);
Database_String[3,4]:=DINT_TO_STRING(Database_DINT[3,4]);
Database_String[3,5]:=DINT_TO_STRING(Database_DINT[3,5]);
Database_String[4,0]:=DINT_TO_STRING(Database_DINT[4,0]);
Database_String[4,1]:=DINT_TO_STRING(Database_DINT[4,1]);
Database_String[4,2]:=DINT_TO_STRING(Database_DINT[4,2]);
Database_String[4,3]:=DINT_TO_STRING(Database_DINT[4,3]);
Database_String[4,4]:=DINT_TO_STRING(Database_DINT[4,4]);
Database_String[4,5]:=DINT_TO_STRING(Database_DINT[4,5]);
Database_String[5,0]:=DINT_TO_STRING(Database_DINT[5,0]);
Database_String[5,1]:=DINT_TO_STRING(Database_DINT[5,1]);
Database_String[5,2]:=DINT_TO_STRING(Database_DINT[5,2]);
Database_String[5,3]:=DINT_TO_STRING(Database_DINT[5,3]);
Database_String[5,4]:=DINT_TO_STRING(Database_DINT[5,4]);
Database_String[5,5]:=DINT_TO_STRING(Database_DINT[5,5]);
*)




CASE step OF
	0:	(* Wait for rising edge at bWrite variable *)
		IF bWrite THEN
			bWrite 		:= FALSE;
			bBusy 		:= TRUE;
			bError		:= FALSE;
			nErrId		:= 0;
			hFile		:= 0;
			nRow	 	:= 0;
			nColumn	:= 0;
			step 		:= 1;
		END_IF

	1:	(* Open source file *)
		fbFileOpen(  bExecute := FALSE  );
		fbFileOpen( 	sNetId := sNetId, sPathName := sFileName, nMode := FOPEN_MODEWRITE OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
						ePath := PATH_GENERIC, bExecute := TRUE );
		step := 2;

	2:(* Wait until open not busy *)
		fbFileOpen( bExecute := FALSE, bError => bError, nErrID => nErrID, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			IF NOT fbFileOpen.bError THEN
				step := 3;
			ELSE(* Error: file not found? *)
				step := 100;
			END_IF
		END_IF

	3:(* Convert one PLC record to CSV format *)
		sCSVLine := '';
		fbWriter.eCmd := eEnumCmd_First;(* Write first field value *)
		IF nRow <= MAX_CSV_ROWS THEN

			FOR nColumn := 0 TO MAX_CSV_COLUMNS BY 1 DO

				sCSVField := STRING_TO_CSVFIELD( Database_STRING[ nRow, nColumn ], FALSE );(* TODO: Get field value from your application *)

				(* Add new field to the record buffer *)
				fbWriter( 	pBuffer := ADR( sCSVLine ), cbBuffer := SIZEOF( sCSVLine ) - 1, putValue := sCSVField, pValue := 0, cbValue := 0,
							bCRLF := ( nColumn = MAX_CSV_COLUMNS ) );(* bCRLF == TRUE => Write CRLF after the last field value *)
				IF fbWriter.bOk THEN
					fbWriter.eCmd := eEnumCmd_Next;(* Write next field value *)
				ELSE(* Error *)
					step := 100;
					RETURN;
				END_IF

			END_FOR(* FOR nColumn := 0... *)

			(* FB_FilePuts adds allready CR (carriage return) to the written line.
			We have to replace the $R$L characters with $L character to avoid double CR. *)
			IF RIGHT( sCSVLine, 2 ) = '$R$L' THEN
				sCSVLine := REPLACE( sCSVLine, '$L', 2, LEN( sCSVLine ) - 1 );
			END_IF

			nRow := nRow + 1;(* Increment number of created records (rows) *)
			step := 4;(* Write record to the file *)

		ELSE(* All rows written => Close file *)
			step := 10;
		END_IF

	4:	(* Write single text line *)
		fbFilePuts( bExecute := FALSE );
		fbFilePuts( sNetId := sNetId, hFile := hFile, sLine := sCSVLine, bExecute := TRUE );
		step := 5;

	5:(* Wait until write not busy *)
		fbFilePuts( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF NOT fbFilePuts.bBusy THEN
			IF NOT fbFilePuts.bError THEN
				step := 3;(* Write next record *)
			ELSE(* Error *)
				step := 100;
			END_IF
		END_IF

	10:	(* Close source file *)
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		step := 11;

	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			step := 100;
		END_IF

	100: (* Error or ready step => cleanup *)
		IF ( hFile <> 0 ) THEN
			step := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			step := 0;	(* Ready *)
		END_IF

END_CASE



]]></ST>
    </Implementation>
    <LineIds Name="P_Text_Mode_Write">
      <LineId Id="167" Count="1" />
      <LineId Id="176" Count="34" />
      <LineId Id="169" Count="0" />
      <LineId Id="171" Count="4" />
      <LineId Id="34" Count="101" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>